#+AUTHOR: Steven Spasbo
#+TITLE: emacs-init.el
#+EMAIL: stevenspasbo@gmail.com
#+PROPERTY: header-args :tangle ~/.emacs.d/emacs-init.el :comments org

* Startup
** Package stuff
#+BEGIN_SRC emacs-lisp
(setq package-archives
      '(("marmalade"    . "http://marmalade-repo.org/packages/")
        ("gnu"          . "https://elpa.gnu.org/packages/")
        ("org"          . "http://orgmode.org/elpa/")
        ("melpa"        . "https://melpa.org/packages/")
        ("melpa-stable" . "https://stable.melpa.org/packages/")))

(setq package-enable-at-startup nil
      package--init-file-ensured t)

(eval-and-compile
  (setq use-package-verbose (not (bound-and-true-p byte-compile-current-file))))

(mapc #'(lambda (add) (add-to-list 'load-path add))
      (eval-when-compile
        (package-initialize)
        (let ((required-packages '(use-package diminish))
              (refreshed? nil))
          (dolist (p required-packages)
            (unless (package-installed-p p)
              (when (null refreshed?)
                (package-refresh-contents)
                (setq refreshed? t))
              (package-install p))))
        (let ((package-user-dir-real (file-truename package-user-dir)))
          (nreverse (apply #'nconc
                           (mapcar #'(lambda (path)
                                       (if (string-prefix-p package-user-dir-real path)
                                           (list path)
                                         nil))
                                   load-path))))))

(eval-when-compile
  (require 'use-package))
(require 'bind-key)
(require 'diminish)


#+END_SRC
** Constants and aliases
#+BEGIN_SRC emacs-lisp
(defconst emacs-start-time (current-time))
(defconst *is-a-mac* (eq system-type 'darwin))
(defconst real-emacs-directory (file-truename user-emacs-directory))
(defconst *is-window* (not (null window-system)))


(defalias 'yes-or-no-p 'y-or-n-p) ; y/n instead of yes/no
#+END_SRC

** Custom-file
Disable custom file, put any changes you want in their relevant package configurations.
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(if (file-exists-p "~/.emacs.d/custom.el")
    (load-file "~/.emacs.d/custom.el"))
#+END_SRC
** Variables
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Steven Spasbo"
      user-mail-address "stevenspasbo@gmail.com"
      inhibit-splash-screen t  ; Don't show splash screen
      inhibit-startup-screen t ; Or startup screen
      debug-on-error t
      system-uses-terminfo nil
      scroll-preserve-screen-position 'always
      kill-do-not-save-duplicates t)

(setq-default tab-always-indent 'complete ; Enable tab completion
              indent-tabs-mode nil ; Disable all tabs
              require-final-newline 'visit-save ; Insert final newline
              indicate-empty-lines t
              line-spacing 1         ; Easier on the eyes
              undo-limit 100000
              vc-follow-symlinks t   ; Silently follow symlinks
              make-backup-files nil  ; Disable backup~
              auto-save-default nil  ; Disable #autosave# files
              auto-save-list-file-prefix nil
              ring-bell-function (lambda ())
              confirm-kill-emacs 'y-or-n-p ; Disallow accidental exits
              initial-scratch-message ""
              frame-title-format "%b (%f)"
              load-prefer-newer t)
#+END_SRC

** Text - UTF-8 all the things
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(setenv "LC_CTYPE" "UTF-8")
(setenv "LC_ALL" "en_US.UTF-8")
(setenv "LANG" "en_US.UTF-8")
(set-default-coding-systems 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment 'utf-8)
(set-terminal-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(unless (eq system-type 'windows-nt)
 (set-selection-coding-system 'utf-8))
#+END_SRC

** Disable warnings
Don't warn about narrowing or downcasing
#+BEGIN_SRC emacs-lisp
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column 'disabled nil)

(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
#+END_SRC

** Disable scrollwheel
#+BEGIN_SRC emacs-lisp
(global-set-key [wheel-up] 'ignore)
(global-set-key [wheel-down] 'ignore)
(global-set-key [double-wheel-up] 'ignore)
(global-set-key [double-wheel-down] 'ignore)
(global-set-key [triple-wheel-up] 'ignore)
(global-set-key [triple-wheel-down] 'ignore)
#+END_SRC

* Functions
** Insert look of disapproval
#+BEGIN_SRC emacs-lisp
(defun lod ()
  "Well. This is disappointing."
  (interactive)
  (insert "ಠ_ಠ"))
(global-set-key (kbd "C-c M-d") #'lod)
#+END_SRC

** load-directory
#+BEGIN_SRC emacs-lisp
(defun load-directory (directory)
  "Load recursively all `.el' files in DIRECTORY."
  (dolist (element (directory-files-and-attributes directory nil nil nil))
    (let* ((path (car element))
	   (fullpath (concat directory "/" path))
	   (isdir (car (cdr element)))
	   (ignore-dir (or (string= path ".") (string= path ".."))))
      (cond
       ((and (eq isdir t) (not ignore-dir))
	(load-directory fullpath))
       ((and (eq isdir nil) (string= (substring path -3) ".el"))
        (load (file-name-sans-extension fullpath)))))))
#+END_SRC

** watchwords - highlights keywords
[[http://writequit.org/org/#281f1a45-954d-4412-bcb6-35c847be9b1a][Taken from writequit]]
#+BEGIN_SRC emacs-lisp
(defun my/add-watchwords ()
  "Highlight FIXME, TODO, and NOCOMMIT in code"
  (font-lock-add-keywords
   nil '(("\\<\\(FIXME\\|TODO\\|NOCOMMIT\\)\\>"
          1 '((:foreground "#d7a3ad") (:weight bold)) t))))

(add-hook 'prog-mode-hook #'my/add-watchwords)
#+END_SRC

** kill-back-to-indentation
[[http://pages.sachachua.com/.emacs.d/Sacha.html#orgheadline131][Taken from Sacha's blog]]
#+BEGIN_SRC emacs-lisp
(defun sanityinc/kill-back-to-indentation ()
  "Kill from point back to the first non-whitespace character on the line."
  (interactive)
  (let ((prev-pos (point)))
    (back-to-indentation)
    (kill-region (point) prev-pos)))
(global-set-key (kbd "C-M-<backspace>") 'sanityinc/kill-back-to-indentation)
#+END_SRC

** get-current-branch
#+BEGIN_SRC emacs-lisp
(defun current-git-branch (pwd)
  "Returns current git branch as a string.
If string is empty, current directory is not a git repo"
  (interactive)
  (use-package esh-ext :defer)
  (when (and (eshell-search-path "git") (locate-dominating-file pwd ".git"))
    (let ((git-output (shell-command-to-string (concat "cd " pwd " && git branch | grep '\\*' | sed -e 's/^\\* //'"))))
      (if (> (length git-output) 0)
	  (concat " (" (substring git-output 0 -1) ")" )
	""))))
#+END_SRC

* General bindings
#+BEGIN_SRC emacs-lisp
(use-package face-remap
  :bind (("C-M-=" . text-scale-increase)
         ("C-M--" . text-scale-decrease)))
#+END_SRC

* Configure packages
** System
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure
    :commands (exec-path-from-shell-initialize exec-path-from-shell-getenv)
    :config
    (if *is-a-mac*
        (exec-path-from-shell-initialize)))
#+END_SRC
** Usability
*** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure
  :diminish which-key-mode
  :config
  (setq which-key-side-window-max-height 0.35
        which-key-idle-secondary-delay 0.1
        which-key-idle-delay 0.3
        which-key-compute-remaps t)
  (which-key-add-key-based-replacements
    ;; C-x
    "C-x" "C-x prefix"
    "C-x a" "abbrev/expant"
    "C-x r" "rectangle/bookmark"
    "C-x v" "version control"
    "C-x 8" "unicode"
    "C-x RET" "encoding"
    ;; C-c
    "C-c" "C-c prefix"
    "C-c !" "flycheck"
    "C-c &" "yasnippet"
    ;; M-g
    "M-g" "goto / errors")
  (which-key-mode 1))
#+END_SRC

*** crux
#+BEGIN_SRC emacs-lisp
(use-package crux
  :ensure
  :bind (("C-c r" . crux-rename-file-and-buffer)
         ([remap move-beginning-of-line] . crux-move-beginning-of-line)
         ([remap kill-whole-line] . crux-kill-whole-line)))
#+END_SRC
** ERC
#+BEGIN_SRC emacs-lisp
(use-package erc-hl-nicks
  :ensure
  :after erc
  :commands erc-hl-nicks-mode
  :config
  (erc-hl-nicks-mode 1))

(use-package erc-join
  :after erc
  :commands (erc-autojoin-mode)
  :config
  (erc-autojoin-mode 1)
  (setq erc-autojoin-timing 'ident
        erc-autojoin-channels-alist
        '((".*\\.freenode.net" ; freenode.net
           "#emacs" "#racket" "#scheme"
           "#haskell" "#haskell-beginners" "#lisp"
           "#programming" "#php"
           "#startups" "#drupal-support" "#drupal"
           "#clojure"))))

(use-package erc-track
  :after erc
  :commands (erc-track-mode)
  :config
  (setq erc-track-exclude-types
        '("JOIN" "NICK" "PART" "QUIT" "MODE"
          "324" "329" "332" "333" "353" "477"))
  (erc-track-mode 1))
#+END_SRC

** eshell
#+BEGIN_SRC emacs-lisp
(use-package eshell
  :bind (("C-c s" . eshell))
  :config
  (defun eshell/clear ()
    "Clears the shell buffer ala Unix's clear."
    ;; the shell prompts are read-only, so clear that for the duration
    (let ((inhibit-read-only t))
      ;; simply delete the region
      (erase-buffer))))

(use-package esh-opt
  :after eshell)

(use-package em-prompt
  :after eshell
  :config)

(use-package eshell-prompt-extras
  :ensure
  :after em-prompt
  :config
  (setq eshell-highlight-prompt nil
        eshell-prompt-function 'epe-theme-lambda))

(use-package em-dirs
  :after eshell
  :config
  (defun get-abbriv-directory ()
    "Gets the current directory, replaces home with ~"
    (interactive)
    (abbreviate-file-name (eshell/pwd))))

(use-package em-cmpl
  :after eshell
  :bind (([remap eshell-pcomplete] . helm-esh-pcomplete))
  :config
  (setq eshell-cmpl-ignore-case t))

(use-package em-hist
  :after eshell
  :config
  (setq eshell-save-history-on-exit t
        eshell-hist-ignoredups t
        eshell-history-size nil))

(use-package em-glob
  :after eshell
  :config
  (setq eshell-glob-case-insensitive t
        eshell-glob-include-dot-files t))

;; (use-package em-prompt
;;   :after eshell
;;   :config
;;   (setq eshell-prompt-function
;;         (lambda ()
;;           (let* ((dirz (get-abbriv-directory))
;;                  (my/host (system-name))                  )
;;             (concat
;;              (propertize "[" 'face `(:foreground "#FFFFFF"))
;;              (propertize (epe-user-name) 'face `(:foreground "#1585C6"))
;;              (propertize "@" 'face `(:foreground "#D63883" :weight bold))
;;              (propertize my/host 'face `(:foreground "#22A198"))
;;              (propertize ": " 'face `(:foreground "#22A198"))
;;              (propertize dirz 'face `(:foreground "#7BC783"))
;;              (propertize "]" 'face `(:foreground "#FFFFFF"))
;;              (propertize (epe-git-branch) 'face `(:foreground "#FFFFFF"))
;;              (propertize "\nλ " 'face `(:foreground "#7BC783")))))
;;         eshell-prompt-regexp "^. "))

#+END_SRC

** Org
*** org-agenda
#+BEGIN_SRC emacs-lisp
(use-package org-agenda
  :bind (("C-c a" . org-agenda)
         ("C-c t a" . pop-to-org-agenda))
  :config
  (defun pop-to-org-agenda (split)
    "Visit org agenda, in the current window or a SPLIT"
    (interactive "P")
    (org-agenda-list)
    (when (not split)
      (delete-other-windows))))
#+END_SRC

*** org-src
#+BEGIN_SRC emacs-lisp
(use-package org-src
  :after org
  :config
  (progn
    (setq org-src-window-setup 'current-window
          org-src-tab-acts-natively t
          org-src-preserve-indentation t)
    ;; Fixes flycheck in src blocks
    (defadvice org-edit-src-code (around set-buffer-file-name activate compile)
      (let ((file-name (buffer-file-name)))
        ad-do-it
        (setq buffer-file-name file-name)))))
#+END_SRC

*** org
#+BEGIN_SRC emacs-lisp
(use-package org-indent
  :hook (org-mode . org-indent-mode)
  :diminish "")

(use-package ob-tangle
  :hook (after-save . tangle-and-byte-compile-init)
  :config
  (defun tangle-and-byte-compile-init ()
    (when (equal (buffer-file-name)
                 (file-truename (concat user-emacs-directory "emacs-init.org")))
      (let ((prog-mode-hook nil))
        (org-babel-tangle)))))

(use-package org
  :hook (org-mode . visual-line-mode)
  :bind (("C-c b" . org-iswitchb)
         ("C-c l" . org-store-link)
         ("C-c C-n" . org-add-note))
  :config
  (progn
    (let ((db-org (concat (getenv "HOME") "/Dropbox/org-files")))
      (if (file-exists-p db-org) (setq org-directory db-org)))

    (setq org-default-notes-file (concat org-directory "/notes.org")
          org-agenda-files (list
                            (concat org-directory "/planner.org")
                            org-default-notes-file)
          org-todo-keywords '((sequence "TODO" "IN-PROGRESS" "|" "DONE" "CANCELED"))
          org-columns-default-format "%14CATEGORY(Category) %50ITEM(Item) %10TODO(Status) %30TAGS(Tags)"
          org-src-fontify-natively t
          org-ellipsis " ⤵"
          ;; org-refile-targets '((org-agenda-files . (:maxlevel . 10)))
          ;; org-log-done t
          ;; org-reverse-note-order t
          ;; org-hide-emphasis-markers t
          ;; org-pretty-entities t
          ;; org-outline-path-complete-in-steps nil
          ;; org-refile-use-outline-path 'file
          org-imenu-depth 5)

    (add-to-list 'org-structure-template-alist
                 '("se" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" "<src lang=emacs-lisp\"?\">\n\n</src>"))))
#+END_SRC

*** org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :hook (org-mode . org-bullets-mode)
  :config
  (setq org-bullets-bullet-list '("◉" "○" "✸" "✿")))

#+END_SRC

*** org-capture
#+BEGIN_SRC emacs-lisp
(use-package org-capture
  :bind ("C-c c" . org-capture)
  :config
  (progn
    (setq org-capture-templates '()
          org-capture-bookmark nil)

    ;; Personal templates
    ;; (add-to-list 'org-capture-templates '("p" "Prefix for personal tasks"))
    (add-to-list 'org-capture-templates
                 '("p" "Personal task" entry (file+olp org-default-notes-file "Personal" "TODOs")
                   "* TODO %^{Task} %^g\nSCHEDULED: %U") :kill-buffer)
    (add-to-list 'org-capture-templates
                 '("j" "Jiu-jitsu notes"
                   entry (file+datetree "jiujitsu.org")
                   "* %^{Class description} %T\n%?"))
    ;; Work templates
    (add-to-list 'org-capture-templates '("w" "Prefix for work tasks"))
    (add-to-list 'org-capture-templates
                 '("wm" "Meeting notes" entry (file+headline org-default-notes-file "Meetings")
                   "* %^{Meeting name} on %U\n%?"
                   :prepend))
    (add-to-list 'org-capture-templates
                 '("wt" "Work TODO" entry (file+olp org-default-notes-file "Work" "TODOs")
                   "* TODO %^{Task} %^g\n%?\nSCHEDULED: %U"))
    (add-to-list 'org-capture-templates
                 '("wn" "Work note" entry (file+olp org-default-notes-file "Work" "Notes")
                   "* %^{Notes title}\n%?"))))
#+END_SRC

** Helm
*** Helm core
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure
  :bind (("C-c h" . helm-command-prefix)
         ("M-x" . helm-M-x)
         ("C-M-z" . helm-resume)
         ("C-x r b" . helm-filtered-bookmarks)
         ([remap switch-to-buffer] . helm-mini)
         :map helm-map
         ;; rebind tab to do persistent action
         ("<tab>" . helm-execute-persistent-action)
         ;; make TAB works in terminal
         ("C-i"   . helm-execute-persistent-action)
         ("C-z"   . helm-select-action)
         ("C-p"   . helm-previous-line)
         ("C-n"   . helm-next-line)
         ("C-M-n" . helm-next-source)
         ("C-M-p" . helm-previous-source)
         ("M-N"   . helm-next-source)
         ("M-P"   . helm-previous-source))
  :init
  (use-package helm-config)
  (use-package helm-mode
    :diminish helm-mode)
  (global-unset-key (kbd "C-x c"))
  (global-set-key (kbd "M-x") 'undefined)
  :config
  (helm-mode 1)
  (add-to-list 'helm-completing-read-handlers-alist '(org-set-tags-command))
  (add-to-list 'helm-completing-read-handlers-alist '(org-set-tags))
  (add-to-list 'helm-completing-read-handlers-alist '(org-match-sparse-tree))
  (setq helm-split-window-in-side-p t
        helm-mode-fuzzy-match t
        helm-completion-in-region-fuzzy-match t))

;; (define-key global-map [remap find-tag] 'helm-etags-select)

(use-package helm-adaptive
  :config (helm-adaptive-mode 1))

(use-package helm-utils
  ;; Popup buffer-name or filename in grep/moccur/imenu-all etc...
  :config (helm-popup-tip-mode 1))

(use-package helm-sys
  :config (helm-top-poll-mode 1))

(use-package helm-ring
  :bind ("M-y" . helm-show-kill-ring))

(use-package helm-ag
  :ensure
  :bind (("C-c h a" . helm-do-ag))
  :config
  (setq helm-ag-base-command "ag --nocolor --nogroup --ignore-case"
        helm-ag-insert-at-point 'symbol))

(use-package helm-semantic
  :bind (("C-c i" . helm-semantic-or-imenu)))

(use-package helm-elisp
  :bind ("C-h a" . helm-apropos))

(use-package helm-files
  :bind ("C-x C-f" . helm-find-files))

(use-package helm-eshell
  :commands helm-esh-pcomplete)

;; helm-bookmark
(setq helm-bookmark-show-location t)

(use-package helm-elisp
  :config
  (setq helm-lisp-fuzzy-completion t))

;; helm-buffers
(setq helm-buffers-fuzzy-matching t)
(setq helm-ff-file-name-history-use-recentf t
      helm-ff-skip-boring-files t
      helm-ff-search-library-in-sexp t

      helm-grep-default-command "grep -a -d skip %e -n%cH -e %p %f"
      helm-grep-default-recurse-command "grep -a -d recurse %e -n%cH -e %p %f"
      helm-input-idle-delay 0.05
      helm-buffer-max-length 25
      helm-reuse-last-window-split-state t
      helm-always-two-windows t)

(when (executable-find "curl")
  (setq helm-net-prefer-curl t))

;; ggrep is gnu grep on OSX
(when (executable-find "ggrep")
  (setq helm-grep-default-command
        "ggrep -a -d skip %e -n%cH -e %p %f"
        helm-grep-default-recurse-command
        "ggrep -a -d recurse %e -n%cH -e %p %f"))

#+END_SRC
*** helm-fuzzier
#+BEGIN_SRC emacs-lisp
;; (use-package helm-fuzzier
;;   :ensure
;;   :disabled t
;;   ;; :after helm
;;   :config
;;   (helm-fuzzier-mode nil))
#+END_SRC

*** helm-descbinds
#+BEGIN_SRC emacs-lisp
(use-package helm-descbinds
  :ensure
  :bind (("C-h b" . helm-descbinds))
  :config
  (helm-descbinds-mode 1))
#+END_SRC

*** helm-swoop
#+BEGIN_SRC emacs-lisp
(use-package helm-swoop
  :ensure
  :bind (("M-i" . helm-swoop)
         ("M-I" . helm-multi-swoop)
         :map helm-swoop-map
         ("M-i" . helm-multi-swoop-all-from-helm-swoop)
         :map isearch-mode-map
         ("M-i" . helm-swoop-from-isearch))
  :config
  (setq helm-multi-swoop-edit-save t
        helm-swoop-split-direction 'split-window-vertically
        helm-swoop-use-fuzzy-match t
        helm-swoop-split-with-multiple-windows t
        helm-swoop-speed-or-color nil
        helm-swoop-use-line-number-face t))
#+END_SRC

*** helm-gtags
#+BEGIN_SRC emacs-lisp
(use-package helm-gtags
  :ensure
  :diminish helm-gtags-mode
  :bind (:map helm-gtags-mode-map
              ("C-c g a" . helm-gtags-tags-in-this-function)
              ("C-c g r" . helm-gtags-find-rtag)
              ("C-c >" . helm-gtags-next-history)
              ("C-c <" . helm-gtags-previous-history)
              ("M-," . helm-gtags-pop-stack)
              ("M-." . helm-gtags-dwim)
              ("C-j" . helm-gtags-select))
  :config
  (setq helm-gtags-ignore-case t
        helm-gtags-auto-update t
        helm-gtags-use-input-at-cursor t
        helm-gtags-pulse-at-cursor t
        helm-gtags-suggested-key-mapping t
        helm-gtags-prefix-key "\C-cg"))
#+END_SRC
** flycheck
*** flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure
  :config
  (global-flycheck-mode)
  ;; Set flycheck faces
  (set-face-background 'flycheck-fringe-warning nil)
  (set-face-attribute 'flycheck-error nil
                      :foreground nil
                      :background nil
                      :underline "#dc322f")
  (set-face-attribute 'flycheck-warning nil
                      :foreground nil
                      :background nil
                      :underline "#b58900")
  (set-face-attribute 'flycheck-info nil
                      :foreground nil
                      :background nil
                      :underline "#268bd2")
  (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
  (if (executable-find "eslint")
      (setq flycheck-javascript-eslint-executable "eslint")))
#+END_SRC

*** helm-flycheck
#+BEGIN_SRC emacs-lisp
(use-package helm-flycheck
  :ensure
  :bind (:map flycheck-mode-map
         ("C-c ! h" . helm-flycheck))
  :after flycheck)
#+END_SRC

** Version control
*** gitconfig-mode
#+BEGIN_SRC emacs-lisp
(use-package gitconfig-mode
  :ensure
  :mode (("gitconfig\\'" . gitconfig-mode)))

(use-package gitignore-mode
  :ensure
  :mode (("gitignore\\'" . gitignore-mode)))
#+END_SRC
*** magit
[[https://github.com/magit/magit][Github]]
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure
  :bind (("C-x g" . magit-status)))
#+END_SRC

** Files
*** ediff
#+BEGIN_SRC emacs-lisp
(use-package ediff
  :commands (ediff)
  :config
  (setq ediff-split-window-function 'split-window-horizontally))
#+END_SRC

*** neotree
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure
  :bind (("C-c n" . neotree))
  :config
  (setq-default neo-smart-open t
                neo-dont-be-alone t)
  (setq neo-theme 'classic))
#+END_SRC
*** dired
#+BEGIN_SRC emacs-lisp
(use-package dired
  :defer
  :config
  (setq dired-recursive-copies 'always
        dired-recursive-deletes 'always
        dired-listing-switches "-alhFG"))

#+END_SRC
*** autorevert
#+BEGIN_SRC emacs-lisp
(use-package autorevert
  :diminish global-auto-revert-mode
  :config
  (setq auto-revert-verbose nil)
  (global-auto-revert-mode))
#+END_SRC

*** saveplace
#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :commands (save-place-mode)
  :config
  (unless (version< emacs-version "25")
    (save-place-mode 1))
  (setq-default save-place t))
#+END_SRC
*** recentf
#+BEGIN_SRC emacs-lisp
(use-package recentf
  :commands (recentf-mode)
  :functions (recentf-load-list)
  :config
  (recentf-mode 1)
  ;; Prevents package.el updates from adding compiled files to recentf list
  (defsubst file-was-visible-p (file)
    "Return non-nil if FILE's buffer exists and has been displayed."
    (let ((buf (find-buffer-visiting file)))
      (if buf
          (let ((display-count (buffer-local-value 'buffer-display-count buf)))
            (if (> display-count 0) display-count nil)))))
  (setq recentf-max-saved-items 500
        recentf-auto-cleanup 'never
        recentf-max-menu-items 20
        recentf-keep '(keep-default-and-visible-recentf-p)))
#+END_SRC
** Completion / tagging
*** dash-at-point
#+BEGIN_SRC emacs-lisp
(use-package dash-at-point
  :ensure
  :bind (("C-c d" . dash-at-point)))
#+END_SRC
*** Company
[[https://github.com/company-mode/company-mode][Complete Anything]]
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure
  :diminish ""
  :config
  (setq company-minimum-prefix-length 2
        company-idle-delay 0.1
        company-tooltip-align-annotations t
        company-selection-wrap-around t
        company-global-modes '(not org-mode erc-mode eshell-mode sh-mode))

  (set-face-background 'company-tooltip-annotation (face-background 'company-tooltip))
  (set-face-background 'company-tooltip-annotation-selection (face-background 'company-tooltip-selection))
  (global-company-mode))
#+END_SRC

*** company-flx
#+BEGIN_SRC emacs-lisp
;; (use-package company-flx
;;   :ensure
;;   :after company
;;   :config
;;   (company-flx-mode +1))
#+END_SRC

*** yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure
  :after company
  :diminish yas-minor-mode
  :commands (yas-global-mode yas-minor-mode update-company-backends-with-snippets)
  :config
  (yas-global-mode 1)
  ;; Add yasnippet support for all company backends
  ;; https://github.com/syl20bnr/spacemacs/pull/179
  (defvar company-mode/enable-yas t
    "Enable yasnippet for all backends.")

  (defun company-mode/backend-with-yas (backend)
    (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (defun update-company-backends-with-snippets ()
    (interactive)
    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))))
#+END_SRC

*** hippie
#+BEGIN_SRC emacs-lisp
(use-package hippie-exp
  :bind (("M-/" . hippie-expand))
  :config
  (add-to-list 'hippie-expand-try-functions-list #'yas-hippie-try-expand))
#+END_SRC

*** ggtags
#+BEGIN_SRC emacs-lisp
(use-package ggtags
  :ensure
  :diminish ggtags-mode
  :bind (:map ggtags-mode-map
              ("C-c g u" . ggtags-update-tags)
              ("C-c g c" . ggtags-create-tags)
              ("C-c g s" . ggtags-find-other-symbol)
              ("C-c g h" . ggtags-view-tag-history)
              ("C-c g r" . ggtags-find-reference)
              ("C-c g f" . ggtags-find-file)
              ("M-," . pop-tag-mark)))
#+END_SRC

** Benchmarking and metrics
#+BEGIN_SRC emacs-lisp
(use-package keyfreq
  :ensure
  :config
  (setq keyfreq-excluded-commands
        '(self-insert-command
          previous-line
          next-line
          mwheel-scroll
          mouse-drag-region
          mouse-set-point
          left-char
          ivy-done
          kill-line
          save-buffers))
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))

(use-package esup
  :ensure
  :commands (esup esup-emacs-init)
  :config
  (defun esup-emacs-init ()
    "By default esup will only show how long it takes to load files from init.el"
    (interactive)
    (esup (file-truename "~/.emacs.d/emacs-init.el"))))

#+END_SRC

** Theming

*** Themes
#+BEGIN_SRC emacs-lisp
(use-package suscolors-theme :ensure :defer)
;; (use-package spacemacs-theme :ensure :defer)
(use-package dracula-theme :ensure :defer)
(use-package atom-one-dark-theme :ensure t :defer t)
(use-package darkokai-theme      :ensure t :defer t)
(use-package github-theme        :ensure t :defer t)
(use-package monokai-theme       :ensure t :defer t)
(use-package paganini-theme      :ensure t :defer t)
(use-package solarized-theme     :ensure t :defer t)
(use-package sublime-themes      :ensure t :defer t)
(use-package zenburn-theme       :ensure t :defer t)
#+END_SRC
*** Powerline
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :ensure
  :defer)
#+END_SRC

*** spaceline
#+BEGIN_SRC emacs-lisp
(use-package spaceline-config
  :if *is-window*
  :ensure spaceline
  :diminish flycheck-mode
  :init
  ;; Displays arrows incorrectly if not set
  (setq ns-use-srgb-colorspace nil)
  :config
  ;; Valid Values: alternate, arrow, arrow-fade, bar, box, brace,
  ;; butt, chamfer, contour, curve, rounded, roundstub, wave, zigzag,
  ;; utf-8
  (setq powerline-default-separator 'wave
        spaceline-highlight-face-func 'spaceline-highlight-face-default
        spaceline-workspace-numbers-unicode t
        spaceline-window-numbers-unicode t)
  (spaceline-emacs-theme)
  (spaceline-helm-mode))
#+END_SRC

*** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
*** golden-ratio
#+BEGIN_SRC emacs-lisp
(use-package golden-ratio
  :ensure
  :commands golden-ratio-mode
  :diminish "φ"
  :config
  (defun pl/helm-alive-p ()
    "Prevents conflicts between helm and golden-ratio-mode"
    (if (boundp 'helm-alive-p)
        (symbol-value 'helm-alive-p)))

  (add-to-list 'golden-ratio-inhibit-functions #'pl/helm-alive-p)
  (add-to-list 'golden-ratio-exclude-buffer-names " *NeoTree*")
  (add-to-list 'golden-ratio-exclude-modes "calendar-mode")
  (golden-ratio-mode 1))
#+END_SRC

*** highlight-line-mode
#+BEGIN_SRC emacs-lisp
(use-package hl-line
  :config
  (global-hl-line-mode 1))
#+END_SRC
** Text
*** Electric pair
#+BEGIN_SRC emacs-lisp
(use-package elec-pair
  :config
  (electric-pair-mode 1))
#+END_SRC
*** aggressive-indent mode
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :ensure
  :commands (aggressive-indent-mode))
#+END_SRC
*** Strings
#+BEGIN_SRC emacs-lisp
(use-package s :ensure :defer)
#+END_SRC
*** Display emojis
#+BEGIN_SRC emacs-lisp
(when *is-a-mac*
  (if (fboundp 'set-fontset-font)
    (set-fontset-font t 'unicode "Apple Color Emoji" nil 'prepend)))
#+END_SRC

*** ispell
#+BEGIN_SRC emacs-lisp
;; (use-package ispell
;;   :defer
;;   :config
;;   (cond
;;    ((executable-find "aspell")
;;     ;; you may also need `ispell-extra-args'
;;     (setq ispell-program-name "aspell"))
;;    ((executable-find "hunspell")
;;     (setq ispell-program-name "hunspell")

;;     ;; Please note that `ispell-local-dictionary` itself will be passed to hunspell cli with "-d"
;;     ;; it's also used as the key to lookup ispell-local-dictionary-alist
;;     ;; if we use different dictionary
;;     (setq ispell-local-dictionary "en_US")
;;     (setq ispell-local-dictionary-alist
;;           '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8))))
;;    (t (setq ispell-program-name nil)))

;;   (defun flyspell-detect-ispell-args (&optional run-together)
;;     "if RUN-TOGETHER is true, spell check the CamelCase words."
;;     (let (args)
;;       (cond
;;        ((string-match  "aspell$" ispell-program-name)
;;         ;; Force the English dictionary for aspell
;;         (setq args (list "--sug-mode=ultra" "--lang=en_US"))
;;         (if run-together
;;             (setq args (append args '("--run-together" "--run-together-limit=5" "--run-together-min=2")))))
;;        ((string-match "hunspell$" ispell-program-name)
;;         ;; Force the English dictionary for hunspell
;;         (setq args "-d en_US")))
;;       args))

;;   ;; ispell-cmd-args is useless, it's the list of *extra* arguments we will append to the ispell process when "ispell-word" is called.
;;   ;; ispell-extra-args is the command arguments which will *always* be used when start ispell process
;;   ;; Please note when you use hunspell, ispell-extra-args will NOT be used.
;;   ;; Hack ispell-local-dictionary-alist instead.
;;   (setq-default ispell-extra-args (flyspell-detect-ispell-args t))
;;   ;; (setq ispell-cmd-args (flyspell-detect-ispell-args))
;;   (defadvice ispell-word (around my-ispell-word activate)
;;     (let ((old-ispell-extra-args ispell-extra-args))
;;       (ispell-kill-ispell t)
;;       (setq ispell-extra-args (flyspell-detect-ispell-args))
;;       ad-do-it
;;       (setq ispell-extra-args old-ispell-extra-args)
;;       (ispell-kill-ispell t)
;;       ))

;;   (defadvice flyspell-auto-correct-word (around my-flyspell-auto-correct-word activate)
;;     (let ((old-ispell-extra-args ispell-extra-args))
;;       (ispell-kill-ispell t)
;;       ;; use emacs original arguments
;;       (setq ispell-extra-args (flyspell-detect-ispell-args))
;;       ad-do-it
;;       ;; restore our own ispell arguments
;;       (setq ispell-extra-args old-ispell-extra-args)
;;       (ispell-kill-ispell t)
;;       ))

;;   (defun text-mode-hook-setup ()
;;     ;; Turn off RUN-TOGETHER option when spell check text-mode
;;     (setq-local ispell-extra-args (flyspell-detect-ispell-args)))
;;   (add-hook 'text-mode-hook 'text-mode-hook-setup)

;;   ;; ;; Possible values: hunspell, aspell, ispell
;;   ;; (let ((desired-spell-checker "aspell"))
;;   ;;   (if (executable-find desired-spell-checker)
;;   ;;       (setq-default ispell-program-name desired-spell-checker)))
;;   ;; ;; To check if system has any valid dictionaries, check output of
;;   ;; ;; hunspell -D
;;   ;; ;; If no dictionaries exist, download from either:
;;   ;; ;; https://addons.mozilla.org/en-us/firefox/language-tools/
;;   ;; ;; https://cgit.freedesktop.org/libreoffice/dictionaries/tree/
;;   ;; (setq ispell-local-dictionary "en_US")
;; )
#+END_SRC

*** Flyspell
#+BEGIN_SRC emacs-lisp
;; (use-package flyspell
;;   :diminish flyspell-mode
;;   :after ispell
;;   :init
;;   (add-hook 'prog-mode-hook #'flyspell-prog-mode)
;;   (add-hook 'text-mode-hook #'turn-on-flyspell)
;;   :commands (flyspell-mode flyspell-prog-mode))
#+END_SRC

*** multiple-cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure
  :bind (("C-c SPC" . set-rectangular-region-anchor)))
#+END_SRC

*** paredit
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure
  :diminish "()"
  :hook (emacs-lisp-mode . paredit-mode)
  :config
  ;; making paredit work with delete-selection-mode
  (put 'paredit-forward-delete 'delete-selection 'supersede)
  (put 'paredit-backward-delete 'delete-selection 'supersede)
  (put 'paredit-newline 'delete-selection t))
#+END_SRC

*** undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure
  :bind (("C-z" . undo-tree-undo)
         ("C-S-z" . undo-tree-redo))
  :diminish ""
  :config
  (global-undo-tree-mode))
#+END_SRC

*** rainbow-mode
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure
  :diminish rainbow-mode
  :commands rainbow-mode
  :config
  (rainbow-mode 1))
#+END_SRC

*** Whitespace
#+BEGIN_SRC emacs-lisp
;; (use-package whitespace
;;   :diminish (global-whitespace-mode
;;              whitespace-mode
;;              whitespace-newline-mode)
;;   :commands (whitespace-buffer
;;              whitespace-cleanup
;;              whitespace-mode)
;;   :config
;;   (progn
;;     ;; (setq whitespace-global-modes '(prog-mode))
;;     ))

#+END_SRC
** Buffer / frame navigation
*** anzu
#+BEGIN_SRC emacs-lisp
(use-package anzu
  :ensure
  :diminish
  :bind
  (([remap query-replace] . anzu-query-replace)
   ([remap query-replace-regexp] . anzu-query-replace-regexp)
   ("C-c r" . anzu-replace-at-cursor-thing))
  :config
  (global-anzu-mode))
#+END_SRC
*** isearch
#+BEGIN_SRC emacs-lisp
(use-package isearch
  :bind (("C-s" . isearch-forward-regexp)
         ("C-r" . isearch-backward-regexp)
         ("C-M-s" . isearch-forward)
         ("C-M-r" . isearch-backward)))
#+END_SRC
*** linum
#+BEGIN_SRC emacs-lisp
(use-package linum
  :hook (prog-mode . linum-mode)
  :config
  (setq linum-format "%4d  ")
  (set-face-attribute 'linum nil :height 110))
#+END_SRC
*** smooth scrolling
#+BEGIN_SRC emacs-lisp
(use-package smooth-scrolling
  :ensure
  :config
  (setq smooth-scroll-margin 5
        scroll-conservatively 101
        scroll-margin 5)
  (smooth-scrolling-mode 1))
#+END_SRC

*** ibuffer
#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :bind (("C-x C-b" . ibuffer))
  :config
  (setq ibuffer-default-sorting-mode 'major-mode))
#+END_SRC
** Calendar
#+BEGIN_SRC emacs-lisp
(use-package calendar
  :defer
  :config
  (let ((org-diary-file "~/Dropbox/org-files/diary"))
    (if (file-exists-p org-diary-file)
        (setq diary-file org-diary-file)))

  (setq calendar-latitude 37.813
        calendar-longitude -122.256
        calendar-location-name "Oakland, CA")
  (add-hook 'calendar-today-visible-hook 'calendar-mark-today))
#+END_SRC

* Major modes
** GO
#+BEGIN_SRC emacs-lisp
(use-package go-mode :ensure :defer)

(use-package company-go
  :ensure
  :after (flycheck go-mode)
  :config
  (add-hook 'go-mode-hook
            (lambda ()
              (set (make-local-variable 'company-backends) '(company-go)))))
#+END_SRC
** Solidity
#+BEGIN_SRC emacs-lisp
(use-package solidity-mode
  :ensure
  :defer
  :config
  (let ((solc (executable-find "solc")))
    (when (bound-and-true-p solc)
      (setq solidity-solc-path solc))))

(use-package solidity-flycheck
  :defer
  :after (flycheck solidity-mode)
  :config
  (if (bound-and-true-p solidity-solc-path)
      (setq solidity-flycheck-solc-checker-active t)))

#+END_SRC
** Rust
#+BEGIN_SRC emacs-lisp
(use-package cargo
  :ensure
  :commands cargo-minor-mode
  :config
  (add-hook 'rust-mode-hook #'cargo-minor-mode))

(use-package racer
  :ensure
  :after rust-mode
  :commands racer-mode
  :config
  (let* ((home (getenv "HOME"))
         (local-rust-src (concat  home "/Development/Rust/rust/src"))
         (local-racer-exec (concat home "/.cargo/bin/racer")))
    (setq racer-cmd local-racer-exec
          racer-rust-src-path local-rust-src))
  (add-hook 'rust-mode-hook #'racer-mode))

(use-package rust-mode
  :ensure
  :defer
  :init
  (add-hook 'rust-mode-hook #'eldoc-mode)
  (add-hook 'rust-mode-hook #'racer-mode)
  (add-hook 'rust-mode-hook #'cargo-minor-mode))

(use-package flycheck-rust
  :ensure
  :after rust-mode
  :config
  (flycheck-rust-setup))

(use-package toml-mode
  :ensure
  :defer)
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure
  :mode (("\\.\\(md\\|markdown\\)\\'" . markdown-mode)))
#+END_SRC
** yaml
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode :ensure :defer)
#+END_SRC
** Shell
#+BEGIN_SRC emacs-lisp
(use-package sh-script
  :mode (;;("\(bash\|zsh\)rc\\'" . sh-mode)
         ("\\(bash_\\|z\\)\\(profile\\|login\\)\\'" . sh-mode)
         ("\\(bash\\|zsh\\)\\(rc\\|env\\|\-theme\\)\\'" . sh-mode)
         ("\\(history\\|aliases\\)\\'" . sh-mode))
  :config
  (setq sh-indentation 2
        sh-basic-offset 2))
#+END_SRC

** Java
#+BEGIN_SRC emacs-lisp
;; (use-package jdee
;;   :ensure
;;   :mode (("\\.java\\'" . jdee-mode)))
#+END_SRC

** Web
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure
  :mode (("\\.html\\'" . web-mode)
         ("\\.html\\.erb\\'" . web-mode)
         ("\\.css\\'" . web-mode)
         ("\\.sass\\'" . web-mode)
         ("\\.scss\\'" . web-mode)
         ("\\.twig\\'" . web-mode)))
#+END_SRC

** comint-mode
#+BEGIN_SRC emacs-lisp
(use-package comint
  :defer
  :config
  (setq comint-prompt-read-only nil))
#+END_SRC

** Javascript
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure
  :mode (("\\.js[on]?\\'" . js2-mode)
         ("\\.lock\\'" . js2-mode))
  :interpreter ("node" . js2-mode)
  :config
  (setq js-indent-level 2
        js2-basic-offset 2
        js2-bounce-indent-p nil))

(use-package tern
  :ensure
  :after js2-mode
  :init
  (add-hook 'js2-mode-hook 'tern-mode))

(use-package company-tern
  :ensure
  :after js2-mode
  :config
  (add-to-list 'company-backends 'company-tern))

#+END_SRC

** Elm
*** elm-mode
#+BEGIN_SRC emacs-lisp
(use-package elm-yasnippets
  :ensure
  :after yasnippet)

(use-package elm-mode
  :ensure
  :defer
  :init
  (add-hook 'elm-mode-hook #'elm-oracle-setup-completion)
  :config
  (setq elm-tags-exclude-elm-stuff nil))
#+END_SRC

*** flycheck-elm
#+BEGIN_SRC emacs-lisp
(use-package flycheck-elm :ensure :defer)

(add-hook 'flycheck-mode-hook 'flycheck-elm-setup)
#+END_SRC

** Elixer
#+BEGIN_SRC emacs-lisp
(use-package alchemist
  :ensure
  :defer
  :config
  (setq alchemist-mix-command "/usr/local/bin/mix")
  (setq alchemist-iex-program-name "/usr/local/bin/iex")
  (setq alchemist-execute-command "/usr/local/bin/elixir")
  (setq alchemist-compile-command "/usr/local/bin/elixirc"))
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :ensure
  :mode (("\\.hs$" . haskell-mode))
  :config
  (progn
    (add-hook 'haskell-mode-hook 'turn-on-haskell-doc)
    (add-hook 'haskell-mode-hook 'haskell-indentation-mode)
    (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
    (setq haskell-font-lock-symbols t
          haskell-process-suggest-remove-import-lines t
          haskell-process-auto-import-loaded-modules t
          haskell-process-log t)))

(use-package flycheck-haskell
  :ensure
  :after haskell-mode
  :config
  (flycheck-haskell-setup))

(use-package company-ghci
  :ensure
  :after haskell-mode
  :config
  (add-to-list 'company-backends 'company-ghci))

(use-package ghc :ensure :defer)
(use-package hi2 :ensure :defer)
#+END_SRC

** LISPs
*** emacs-lisp
#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :hook (emacs-lisp-mode . eldoc-mode)
  :diminish eldoc-mode)

(use-package lisp-mode
  :bind (:map emacs-lisp-mode-map
              ("C-c b" . eval-buffer)))

(defun emacs-lisp-stuff ()
  (set (make-local-variable 'company-backends) '(company-elisp company-capf company-dabbrev-code company-dabbrev)))

(add-hook 'emacs-lisp-mode-hook #'emacs-lisp-stuff)
(add-hook 'lisp-interaction-mode-hook #'emacs-lisp-stuff)
(add-hook 'ielm-mode-hook #'emacs-lisp-stuff)
#+END_SRC
*** common lisp
#+BEGIN_SRC emacs-lisp
(use-package slime
  :ensure
  :bind (:map slime-prefix-map ("M-h" . slime-documentation-lookup))
  :config
  (add-to-list 'slime-contribs 'slime-fancy)
  (slime-setup '(slime-fancy))
  (let ((sbcl "sbcl"))
    (setq inferior-lisp-program (executable-find sbcl)))

  (setq lisp-indent-function 'common-lisp-indent-function))

(add-hook 'sldb-mode-hook 'sldb-font-lock)
#+END_SRC

*** Scheme / Racket
#+BEGIN_SRC emacs-lisp
(use-package geiser :ensure :defer)
(use-package scheme :ensure :defer)
(use-package scheme-complete :ensure :defer)
(use-package racket-mode :ensure :defer)
(use-package quack :ensure :defer)
#+END_SRC

*** Clojure
#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :ensure
  :init
  (add-hook 'clojure-mode-hook #'subword-mode)
  (add-hook 'clojure-mode-hook #'paredit-mode)
  (add-hook 'clojure-mode-hook #'aggressive-indent-mode)
  :mode (("\\.edn$" . clojure-mode)
         ("\\.boot$" . clojure-mode)
         ("\\.cljs.*$" . clojure-mode)
         ("lein-env" . ruby-mode)))

(use-package clojure-mode-extra-font-locking :after clojure-mode)

(use-package clojure-snippets
  :ensure
  :after clojure-mode)

(use-package clojure-cheatsheet
  :ensure
  :after clojure-mode
  :bind (:map clojure-mode-map
              ("C-c C-h" . clojure-cheatsheet)))

(use-package cider
  :ensure
  :after clojure-mode
  :bind (:map clojure-mode-map
              ("C-c C-c" . cider-jack-in))
  :config
  ;; (add-hook 'cider-mode-hook #'cider-turn-on-eldoc-mode)
  (add-hook 'cider-mode-hook #'paredit-mode)
  (setq cider-repl-use-clojure-font-lock t
        ;; go right to the REPL buffer when it's finished connecting
        cider-repl-pop-to-buffer-on-connect t
        ;; When there's a cider error, show its buffer and switch to it
        cider-show-error-buffer t
        cider-auto-select-error-buffer t
        ;; Where to store the cider history.
        cider-repl-history-file "~/.emacs.d/cider-history"
        ;; Wrap when navigating history.
        cider-repl-wrap-history t
        ;; Hide *nrepl-connection* and *nrepl-server* buffers.
        nrepl-hide-special-buffers t
        nrepl-hide-special-buffers t
        nrepl-log-messages t)
  (defun cider-start-http-server ()
    (interactive)
    (cider-load-current-buffer)
    (let ((ns (cider-current-ns)))
      (cider-repl-set-ns ns)
      (cider-interactive-eval (format "(println '(def server (%s/start))) (println 'server)" ns))
      (cider-interactive-eval (format "(def server (%s/start)) (println server)" ns))))

  (defun cider-refresh ()
    (interactive)
    (cider-interactive-eval (format "(user/reset)")))

  (defun cider-user-ns ()
    (interactive)
    (cider-repl-set-ns "user")))
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure
  :commands (elpy-enable)
  :config
  (setq elpy-rpc-backend "jedi")
  (when (executable-find "ipython")
    (elpy-use-ipython)
    (setq python-shell-interpreter-args "-i --simple-prompt"))
  (when (require 'flycheck nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules)
          elpy-modules (delq 'elpy-module-pyvenv elpy-modules))))

(use-package py-autopep8
  :ensure
  :after elpy
  :config
  (add-hook 'elpy-mode-hook #'py-autopep8-enable-on-save))

(use-package python
  :ensure
  :defer
  :config
  (elpy-enable))

#+END_SRC

** C
#+BEGIN_SRC emacs-lisp
(use-package irony
  :ensure
  :commands enable-irony-for-specific-modes
  :hook ((c-mode . enable-irony-for-specific-modes)
         (c++-mode . enable-irony-for-specific-modes))
  :config
  (defun enable-irony-for-specific-modes ()
    ;; avoid enabling irony-mode in modes that inherits c-mode, e.g: php-mode
    (when (member major-mode irony-supported-major-modes)
      (irony-mode 1)))
  (defun irony-enable-completions ()
    (define-key irony-mode-map [remap completion-at-point]
      'irony-completion-at-point-async)
    (define-key irony-mode-map [remap complete-symbol]
      'irony-completion-at-point-async))
  (add-hook 'irony-mode-hook 'irony-enable-completions)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

(use-package company-irony
  :ensure
  :after irony
  :config
  (add-to-list 'company-backends 'company-irony)
  (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
  (delete 'company-backends 'company-clang))

(use-package company-c-headers
  :ensure
  :after irony
  :config
  (add-to-list 'company-backends 'company-c-headers))

(use-package flycheck-irony
  :ensure
  :after irony
  :config
  (flycheck-irony-setup))

(use-package irony-eldoc
  :ensure
  :hook (irony-mode . irony-eldoc)
  :config
  (add-hook 'irony-mode-hook #'irony-eldoc))

#+END_SRC

** PHP / Drupal
#+BEGIN_SRC emacs-lisp

(use-package ac-php :ensure
  :bind (:map php-mode-map
              ("C-]" . ac-php-find-symbol-at-point)
              ("C-t" . ac-php-location-stack-back)))

(use-package company-php
  :ensure
  :after php-mode
  :config
  (add-to-list 'company-backends 'company-ac-php-backend))

(use-package php-mode
  :ensure
  :defer
  :config
  (setq php-mode-coding-style `Drupal
        tab-width 2
        c-basic-offset 2
        indent-tabs-mode nil))

;; (defgroup drupal nil "Drupal IDE" :group 'programming)

;; (defvar drupal-mode-hook nil)

;; (define-derived-mode drupal-mode php-mode "Drupal"
;;   "Custom major mode for Drupal."
;;   :group 'drupal

;;   (defconst drupal-mode-version "v0.0.1"
;;     "Current version of drupal-mode")

;;   (defcustom drupal-api-version 8
;;     "Drupal API version"
;;     :type 'string
;;     :group 'drupal)

;;   (defcustom drupal-api-url "http://api.drupal.org/api/search"
;; 	"URL for API search."
;; 	:type 'string
;; 	:group 'drupal)
;;   (defcustom drupal-ide-use-etags nil
;; 	"Use TAGS file prepared with etags/ctags for code navigation and hook templates."
;; 	:type 'boolean
;; 	:group 'drupal)

;;   (php-enable-drupal-coding-style)
;;   (add-to-list 'company-backends 'company-ac-php-backend)
;;   (ggtags-mode 1)
;;   (setq ggtags-highlight-tag nil)
;;   (helm-gtags-mode)
;;   (run-hooks 'drupal-mode-hook))

;;   (add-to-list 'auto-mode-alist '("/drupal.*\\.\\(php\\|inc\\)$" . drupal-mode))

;;; WIP
;; (defun drupal-module-name ()
;;   (let ((current-file (buffer-file-name)))
;;     )
;;   "Something or other")

;; (defun drupal-module-name-insert ()
;;      (interactive)
;;      (insert (drupal-module-name)))


;;; ENDWIP


;; (defconst my-php-style
;;   '((c-offsets-alist . (
;;     (arglist-close . c-lineup-close-paren))))

;;   (add-to-list 'auto-mode-alist '("\\.\\(module\\|test\\|install\\|theme\\)$" . drupal-mode))
;;   (add-to-list 'auto-mode-alist '("/drupal.*\\.\\(php\\|inc\\)$" . drupal-mode))
;;   (add-to-list 'auto-mode-alist '("\\.info" . conf-windows-mode))
;;   ;; More startup-setup for PHP customizations to work here
;; )

;; (setup-php)

;; (add-hook 'php-mode-hook 'drupal-mode)
#+END_SRC

** ruby
#+BEGIN_SRC emacs-lisp
(use-package inf-ruby :ensure :defer)

(use-package robe
  :ensure
  :after ruby-mode
  :config
  (add-hook 'ruby-mode-hook #'robe-mode)
  (push 'company-robe company-backends))

(use-package rvm
  :ensure
  :after ruby-mode
  :config
  (add-hook 'ruby-mode-hook #'rvm-activate-corresponding-ruby))

(use-package ruby-electric
  :ensure
  :after ruby-mode
  :config
  (add-hook 'ruby-mode-hook #'ruby-electric-mode))

(use-package ruby-mode
  :mode (("Vagrantfile$" . ruby-mode)
         ("rake\\'" . ruby-mode)
         ("Rakefile" . ruby-mode)
         ("\\.gemspec$" . ruby-mode)
         ("Gemfile" . ruby-mode))
  :config
  (setq ruby-indent-level 2
        ruby-indent-tabs-mode nil
        ruby-deep-indent-paren nil)
  (defun ruby-mode-stuff ()
    (ruby-electric-mode 1)
    (robe-mode 1)
    (enable-paredit-mode)
    (rvm-activate-corresponding-ruby)
    (unless (derived-mode-p 'prog-mode)
      (run-hooks 'prog-mode-hook)))
  (add-hook 'ruby-mode-hook #'ruby-mode-stuff))
#+END_SRC

* global and mode hooks
** Global
#+BEGIN_SRC emacs-lisp
(defun after-init-enable-global-modes ()
  "Enables, disables, and diminishes some modes"
  (blink-cursor-mode 0)
  (column-number-mode 1) ; Enable (line,column)
  (delete-selection-mode 1) ; Allows deletions on highlighted text
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

  (global-font-lock-mode 1)
  ;;  (global-prettify-symbols-mode)
  (transient-mark-mode 1)

  (let ((ad-redefinition-action 'accept))
    (helm-mode 1))

  (diminish 'visual-line-mode)

  (if (display-graphic-p)
      ;; If emacs GUI
      (progn
        (load-theme 'dracula t)
        (add-to-list 'default-frame-alist
                     '(font . "Source Code Pro for Powerline-15"))
        (spaceline-emacs-theme)
        (diminish 'flycheck-mode) ;; only if spaceline-emacs-theme is enabled
        (spaceline-helm-mode))
    ;; If terminal
    (progn
      (load-theme 'suscolors t)
      ;;(load-theme 'solarized-dark t)
)))
#+END_SRC

** prog-mode
#+BEGIN_SRC emacs-lisp
(defun prog-setup ()
  (setq show-trailing-whitespace t)
  (show-paren-mode 1)
  (rainbow-delimiters-mode)
  (local-set-key (kbd "RET") 'newline-and-indent))
#+END_SRC
** Hooks
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook #'delete-trailing-whitespace) ; Remove whitespace on save
(add-hook 'prog-mode-hook #'prog-setup)
(add-hook 'after-init-hook #'after-init-enable-global-modes)
#+END_SRC
